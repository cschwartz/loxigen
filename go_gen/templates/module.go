:: # Copyright 2013, Big Switch Networks, Inc.
:: #
:: # LoxiGen is licensed under the Eclipse Public License, version 1.0 (EPL), with
:: # the following special exception:
:: #
:: # LOXI Exception
:: #
:: # As a special exception to the terms of the EPL, you may distribute libraries
:: # generated by LoxiGen (LoxiGen Libraries) under the terms of your choice, provided
:: # that copyright and licensing notices generated by LoxiGen are not altered or removed
:: # from the LoxiGen Libraries and the notice provided below is (i) included in
:: # the LoxiGen Libraries, if distributed in source code form and (ii) included in any
:: # documentation for the LoxiGen Libraries, if distributed in binary form.
:: #
:: # Notice: "Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler."
:: #
:: # You may not use this file except in compliance with the EPL or LOXI Exception. You may obtain
:: # a copy of the EPL at:
:: #
:: # http://www.eclipse.org/legal/epl-v10.html
:: #
:: # Unless required by applicable law or agreed to in writing, software
:: # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
:: # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
:: # EPL for the specific language governing permissions and limitations
:: # under the EPL.
::
:: from loxi_globals import OFVersions
:: import py_gen.oftype
:: include('_copyright.py')

:: include('_autogen.py')

:: include('_package.py')

import (
  "bytes"
  "encoding/binary"
  "github.com/elastic/libbeat/common"
)

type of_port_desc struct {
	port_no    uint16
	hw_addr    [6]uint16
	name       [16]uint8
	config     ofp_port_config
	state      ofp_port_state
	curr       ofp_port_features
	advertised ofp_port_features
	supported  ofp_port_features
	peer       ofp_port_features
	curr_speed uint32
	max_speed  uint32
}

var OpenFlowPacketTypes map[ofp_type]OpenFlowContent = map[ofp_type]OpenFlowContent{
:: for ofclass in ofclasses:
::   if not (ofclass.pyname.startswith('bsn') or ofclass.pyname.startswith('nicira') or ofclass.pyname.startswith('oxm')):
::     if ofclass.superclass and ofclass.superclass.name == 'of_header':
::       if ofclass.pyname == "error_msg":
  OFPT_ERROR: new(${ofclass.pyname}),
::       elif ofclass.pyname == "table_mod":
::         pass
::       else:
  OFPT_${ofclass.pyname.upper()}: new(${ofclass.pyname}),
::       #endif
::     #endif
::   #endif
:: #endfor
}

:: for ofclass in ofclasses:
::   if not (ofclass.pyname.startswith('bsn') or ofclass.pyname.startswith('nicira') or ofclass.pyname.startswith('oxm')):
:: include('_ofclass.go', ofclass=ofclass)
::   #endif
:: #endfor
